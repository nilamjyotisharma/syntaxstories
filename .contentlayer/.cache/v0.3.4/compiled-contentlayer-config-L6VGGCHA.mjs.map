{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["// import { defineDocumentType, makeSource} from 'contentlayer/source-files'\r\n// import rehypeAutolinkHeadings from 'rehype-autolink-headings'\r\n// import rehypePrettyCode from 'rehype-pretty-code'\r\n// import rehypeSlug from 'rehype-slug'\r\n// import remarkGfm from 'remark-gfm'\r\n\r\n// /** @type {import('contentlayer/source-files').ComputedFields} */\r\n// const computedFields = {\r\n//     slug: {\r\n//         type: 'string',\r\n//         resolve: (doc) => `/${doc._raw.flattenedPath}`,\r\n//         },\r\n//     slugAsParams: {\r\n//         type: 'string',\r\n//         resolve: (doc) => doc._raw.flattenedPath.split('/').slice(1).join('/'),\r\n//         },\r\n//     }\r\n\r\n//     export const Blog = defineDocumentType(() => ({\r\n//         name: 'Blog',\r\n//         filePathPattern: `**/*.mdx`,\r\n//         contentType: 'mdx',\r\n//         fields: {\r\n//             title: {\r\n//                 type: 'string',\r\n//                 required: true,\r\n//               },\r\n//             publishedAt: {\r\n//                 type: 'date',\r\n//                 required: true,\r\n//               },\r\n//             summary: {\r\n//                 type: 'string',\r\n//                 required: true,\r\n//               },\r\n//             image: {\r\n//                 type: 'string',\r\n//               },\r\n//             },\r\n//         computedFields,\r\n//     }))\r\n    \r\n//     export default makeSource({\r\n//         contentDirPath: 'content',\r\n//         documentTypes: [Blog],\r\n//         mdx: {\r\n//             remarkPlugins: [remarkGfm],\r\n//             rehypePlugins: [\r\n//                     rehypeSlug,\r\n//                     [\r\n//                         rehypePrettyCode,\r\n//                         {\r\n//                             theme: 'github-dark',\r\n//                             onVisitLine(node) {\r\n                            \r\n//                                 if (node.children.length === 0) {\r\n//                                     node.children = [{ type: 'text', value: ' ' }]\r\n//                                     }\r\n//                             },\r\n//                             onVisitHighlightedLine(node) {\r\n//                                 node.properties.className.push('line--highlighted')\r\n//                             },\r\n//                             onVisitHighlightedWord(node) {\r\n//                                 node.properties.className = ['word--highlighted']\r\n//                             },\r\n//                         }\r\n//                     ],\r\n//                     [\r\n//                         rehypeAutolinkHeadings,\r\n//                             {\r\n//                                 properties: {\r\n//                                     className: ['subheading-anchor'],\r\n//                                     ariaLabel: 'Link to section',\r\n//                                 },\r\n//                             },\r\n//                     ],\r\n//                 ],\r\n//             }\r\n//     })\r\n    \r\n\r\n\r\n\r\nimport { defineDocumentType, makeSource } from 'contentlayer/source-files';\r\nimport remarkGfm from 'remark-gfm';\r\nimport rehypePrettyCode from 'rehype-pretty-code';\r\nimport rehypeSlug from 'rehype-slug';\r\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\r\n\r\n/** @type {import('contentlayer/source-files').ComputedFields} */\r\nconst computedFields = {\r\n  slug: {\r\n    type: 'string',\r\n    resolve: (doc) => doc._raw.flattenedPath,\r\n  },\r\n  tweetIds: {\r\n    type: 'array',\r\n    resolve: (doc) => {\r\n      const tweetMatches = doc.body.raw.match(\r\n        /<StaticTweet\\sid=\"[0-9]+\"\\s\\/>/g\r\n      );\r\n      return tweetMatches?.map((tweet) => tweet.match(/[0-9]+/g)[0]) || [];\r\n    },\r\n  },\r\n  structuredData: {\r\n    type: 'object',\r\n    resolve: (doc) => ({\r\n      '@context': 'https://schema.org',\r\n      '@type': 'BlogPosting',\r\n      headline: doc.title,\r\n      datePublished: doc.publishedAt,\r\n      dateModified: doc.publishedAt,\r\n      description: doc.summary,\r\n      image: doc.image\r\n        ? `https://leerob.io${doc.image}`\r\n        : `https://leerob.io/og?title=${doc.title}`,\r\n      url: `https://leerob.io/blog/${doc._raw.flattenedPath}`,\r\n      author: {\r\n        '@type': 'Person',\r\n        name: 'Lee Robinson',\r\n      },\r\n    }),\r\n  },\r\n};\r\n\r\nexport const Blog = defineDocumentType(() => ({ \r\n  name: 'Blog',\r\n  filePathPattern: `**/*.mdx`,\r\n  contentType: 'mdx',\r\n  fields: {\r\n    title: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n    publishedAt: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n    summary: {\r\n      type: 'string',\r\n      required: true,\r\n    },\r\n    image: {\r\n      type: 'string',\r\n    },\r\n  },\r\n  computedFields,\r\n}));\r\n\r\nexport default makeSource({\r\n  contentDirPath: 'content',\r\n  documentTypes: [Blog],\r\n  mdx: {\r\n    remarkPlugins: [remarkGfm],\r\n    rehypePlugins: [\r\n      rehypeSlug,\r\n      [\r\n        rehypePrettyCode,\r\n        {\r\n          theme: 'one-dark-pro',\r\n          onVisitLine(node) {\r\n            // Prevent lines from collapsing in `display: grid` mode, and allow empty\r\n            // lines to be copy/pasted\r\n            if (node.children.length === 0) {\r\n              node.children = [{ type: 'text', value: ' ' }];\r\n            }\r\n          },\r\n          onVisitHighlightedLine(node) {\r\n            node.properties.className.push('line--highlighted');\r\n          },\r\n          onVisitHighlightedWord(node) {\r\n            node.properties.className = ['word--highlighted'];\r\n          },\r\n        },\r\n      ],\r\n      [\r\n        rehypeAutolinkHeadings,\r\n        {\r\n          properties: {\r\n            className: ['anchor'],\r\n          },\r\n        },\r\n      ],\r\n    ],\r\n  },\r\n});\r\n"],
  "mappings": ";AAmFA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,eAAe;AACtB,OAAO,sBAAsB;AAC7B,OAAO,gBAAgB;AACvB,OAAO,4BAA4B;AAGnC,IAAM,iBAAiB;AAAA,EACrB,MAAM;AAAA,IACJ,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ,IAAI,KAAK;AAAA,EAC7B;AAAA,EACA,UAAU;AAAA,IACR,MAAM;AAAA,IACN,SAAS,CAAC,QAAQ;AAChB,YAAM,eAAe,IAAI,KAAK,IAAI;AAAA,QAChC;AAAA,MACF;AACA,aAAO,cAAc,IAAI,CAAC,UAAU,MAAM,MAAM,SAAS,EAAE,CAAC,CAAC,KAAK,CAAC;AAAA,IACrE;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,IACN,SAAS,CAAC,SAAS;AAAA,MACjB,YAAY;AAAA,MACZ,SAAS;AAAA,MACT,UAAU,IAAI;AAAA,MACd,eAAe,IAAI;AAAA,MACnB,cAAc,IAAI;AAAA,MAClB,aAAa,IAAI;AAAA,MACjB,OAAO,IAAI,QACP,oBAAoB,IAAI,KAAK,KAC7B,8BAA8B,IAAI,KAAK;AAAA,MAC3C,KAAK,0BAA0B,IAAI,KAAK,aAAa;AAAA,MACrD,QAAQ;AAAA,QACN,SAAS;AAAA,QACT,MAAM;AAAA,MACR;AAAA,IACF;AAAA,EACF;AACF;AAEO,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,SAAS;AAAA,MACP,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,IACR;AAAA,EACF;AAAA,EACA;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe,CAAC,SAAS;AAAA,IACzB,eAAe;AAAA,MACb;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,OAAO;AAAA,UACP,YAAY,MAAM;AAGhB,gBAAI,KAAK,SAAS,WAAW,GAAG;AAC9B,mBAAK,WAAW,CAAC,EAAE,MAAM,QAAQ,OAAO,IAAI,CAAC;AAAA,YAC/C;AAAA,UACF;AAAA,UACA,uBAAuB,MAAM;AAC3B,iBAAK,WAAW,UAAU,KAAK,mBAAmB;AAAA,UACpD;AAAA,UACA,uBAAuB,MAAM;AAC3B,iBAAK,WAAW,YAAY,CAAC,mBAAmB;AAAA,UAClD;AAAA,QACF;AAAA,MACF;AAAA,MACA;AAAA,QACE;AAAA,QACA;AAAA,UACE,YAAY;AAAA,YACV,WAAW,CAAC,QAAQ;AAAA,UACtB;AAAA,QACF;AAAA,MACF;AAAA,IACF;AAAA,EACF;AACF,CAAC;",
  "names": []
}
